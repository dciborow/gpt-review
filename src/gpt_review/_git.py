"""Basic Shell Commands for Git."""
import logging
import os
import subprocess
from typing import Dict

from knack import CLICommandsLoader
from knack.commands import CommandGroup
from git.repo import Repo

from gpt_review._command import GPTCommandGroup
from gpt_review._review import _request_goal


def _find_git_dir(path="."):
    while path != "/":
        if os.path.exists(os.path.join(path, ".git")):
            return path
        path = os.path.abspath(os.path.join(path, os.pardir))
    raise FileNotFoundError(".git directory not found")


def _git_diff(rw_dir):
    r = Repo.init(_find_git_dir())
    r.git.commit(message="init")
    return r.index.diff(None, cached=True)


def _diff_sh() -> str:
    """
    Get the diff of the PR
    - run git commands via python
    """
    return subprocess.run(
        ["git", "--no-pager", "diff", "--cached"],
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT,
        check=False,
    ).stdout.decode("utf-8")


def _commit_sh(message: str) -> str:
    return subprocess.run(
        ["git", "commit", "-m", f"{message}"],
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT,
        check=False,
    ).stdout.decode("utf-8")


def _commit_message() -> str:
    """Commit the changes."""

    goal = """
Create a short, single-line, git commit message for these changes
"""
    diff = _diff_sh()
    logging.debug("Diff: %s", diff)

    return _request_goal(diff, goal)


def _commit() -> Dict[str, str]:
    """Run git commit with a commit message generated by GPT."""
    commit_message = _commit_message()
    logging.debug("Commit Message: %s", commit_message)
    return {"response": _commit_sh(commit_message)}


class GitCommandGroup(GPTCommandGroup):
    """Ask Command Group."""

    @staticmethod
    def load_command_table(loader: CLICommandsLoader) -> None:
        with CommandGroup(loader, "git", "gpt_review._git#{}") as group:
            group.command("commit", "_commit", is_preview=True)

    @staticmethod
    def load_arguments(loader: CLICommandsLoader) -> None:
        """Add patch_repo, patch_pr, and access_token arguments."""
        # with ArgumentsContext(loader, "github") as args:
        #     pass
